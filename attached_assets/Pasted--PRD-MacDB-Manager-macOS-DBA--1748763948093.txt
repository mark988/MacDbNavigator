产品需求文档（PRD）
一、产品概述
产品名称：MacDB Manager 产品类型：桌面端数据库管理工具 运行平台：macOS 目标用户：开发者、数据分析师、数据库管理员（DBA）、学生及初学者
产品定位： MacDB Manager 是一款运行于 macOS 平台的本地数据库管理工具，支持 MySQL、PostgreSQL 等主流关系型数据库，具备轻量、高效、智能、原生界面等特点。面向技术人员提供清晰直观的数据库操作体验，并辅助提升数据操作与查询效率。
二、目标与范围
1. 产品目标
* 提供便捷的数据库连接与管理能力
* 支持 SQL 编写、运行、调试与优化
* 支持数据表的可视化查看与编辑
* 支持查询历史、导出导入、结构管理等增强功能
* 优化 macOS 下的使用体验，满足本地用户的高频需求
2. 不在范围内
* 不支持 NoSQL 数据库（如 MongoDB）
* 不提供 Web 或移动端版本
三、核心功能模块（细化）
1. 连接管理模块
* 新建连接：支持输入主机地址、端口、用户名、密码、数据库名、字符集等参数
* 安全设置：支持 SSH 隧道、SSL 加密连接配置
* 连接管理：支持重命名、复制、删除、分组管理连接信息
* 状态反馈：支持连接状态实时反馈、失败提示信息记录
* 导入导出：支持连接配置 JSON 文件导入导出
2. 数据库对象浏览模块
* 支持浏览数据库对象：数据库、表、视图、存储过程、函数、触发器、序列等
* 支持搜索与筛选：快速过滤对象名、模糊搜索
* 对象详情：显示字段、主键、索引、触发器、约束等元信息
* 支持右键操作：快速生成 SQL、删除对象、导出结构等
3. SQL 编辑器模块
* 支持语法高亮与自动补全（关键词、字段、表名、函数）
* 执行选中 SQL、整段 SQL、自定义快捷键支持
* 多标签页支持：同时打开多个查询脚本
* 查询结果支持分页、排序、导出
* 查询计划支持（EXPLAIN / EXPLAIN ANALYZE）
* 查询历史记录：按时间/数据库自动分类保存
4. 数据编辑模块
* 表格视图展示数据
* 数据分页加载（默认每页 100 条，可配置）
* 筛选与条件查询：支持 WHERE 条件、LIMIT、ORDER BY 编辑器
* 单元格双击编辑、批量粘贴数据
* 数据提交与撤销：支持事务处理、撤销修改提示
* 数据导入：CSV、Excel 支持列映射
* 数据导出：CSV、Excel、JSON、SQL INSERT 语句
5. 表结构管理模块
* 字段管理：新增/修改字段名、类型、默认值、是否为空、注释等
* 索引管理：添加、修改、删除主键、唯一索引、普通索引
* 外键管理：设置引用表、字段、删除/更新动作（CASCADE/SET NULL 等）
* DDL 导出：按对象或库导出建表语句
* 表操作：复制表结构、重命名、清空表数据、删除表等
6. AI 助手模块（后续版本）
* 自然语言查询：输入中文/英文语句，自动解析为 SQL 查询语句；支持模糊补全、列名识别、表关联建议等；示例：“查找过去一周新增用户数量”自动转换为带日期过滤条件的 SQL。
* SQL 优化建议：根据查询语句执行计划、表结构、索引使用情况等自动检测潜在问题（如全表扫描、缺失索引、使用非 SARGable 表达式等），并生成优化建议或替代 SQL 示例。
* 查询重构建议：分析用户常用查询模式，自动识别查询意图并建议更高效的写法，例如使用 JOIN 替代子查询、建议索引字段排序、拆分过长查询等。
* 数据摘要生成：自动对查询结果生成简要说明（如趋势总结、最大最小值、分布情况）；支持生成 Markdown 报告片段。
* 智能提示与纠错：在 SQL 编辑器中对语法错误、字段拼写错误等进行智能检测并提供自动修复建议。
* 模型支持：集成本地轻量化 LLM 模型用于处理私有数据查询（不联网），支持嵌入用户本地元数据（字段名、业务术语）进行微调。
* AI 教程助手：根据用户当前行为和输入内容，动态提示 SQL 教程、语法参考、查询思路（例如提示如何进行分页、如何进行分组统计等）。
四、非功能性需求
* 性能：单表数据加载时间不超过 2 秒（<100 万行分页加载）
* 兼容性：支持 macOS 12 及以上版本
* 可用性：操作界面符合 Mac 用户习惯，支持快捷键操作
* 安全性：连接信息本地加密存储；敏感操作需确认提示
五、界面与交互
1. 主界面布局
* 左侧：连接列表和数据库结构树
* 中部：SQL 编辑器与结果显示区（支持多标签）
* 底部：执行日志与消息提示
2. 细节交互
* 支持深色/浅色模式
* 错误提示高亮并跳转至出错行
* 支持窗口分屏与标签拖拽
六、项目开发阶段
阶段	时间	目标
需求分析	第1周	完成 PRD 文档、UI 原型草图
技术预研	第2周	评估开发语言与框架、数据库驱动方案
核心开发	第3-8周	实现连接管理、SQL 编辑器、数据浏览等核心功能
测试优化	第9-10周	进行功能测试与性能调优
发布上线	第11周	打包发布 DMG 安装包，部署官网页面
七、风险与应对
风险	等级	对策
原生开发效率低	中	使用 Swift + SwiftUI 提高开发体验
数据库驱动兼容问题	高	采用成熟开源驱动方案，并建立测试用例库
用户体验不佳	中	提前开展 UI 原型测试与用户反馈收集
八、附录
* 产品 Logo、名称注册等可在测试阶段之后规划
* 可预留插件机制以支持扩展数据库类型
* 后续可规划商业版本（Pro）支持 AI 辅助、ER 图、权限管理等
